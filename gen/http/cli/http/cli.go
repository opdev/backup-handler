// Code generated by goa v3.7.3, DO NOT EDIT.
//
// http HTTP client CLI support package
//
// Command:
// $ goa gen github.com/opdev/backup-handler/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	backupservicec "github.com/opdev/backup-handler/gen/http/backup_service/client"
	restoreservicec "github.com/opdev/backup-handler/gen/http/restore_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `backup-service (create|get|update|delete)
restore-service (create|get|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` backup-service create --body '{
      "command": "hostname -f",
      "container": "pachd",
      "kubernetes_resource": "{\"kind\":\"Pachyderm\",...}",
      "name": "pachdyderm-sample",
      "namespace": "testing",
      "pod": "pachd-65734594-sdg46",
      "storage_secret": "example-aws-secret"
   }'` + "\n" +
		os.Args[0] + ` restore-service create --body '{
      "backup_location": "pachyderm-backup.tar.gz",
      "destination_name": "pachyderm-restore",
      "destination_namespace": "ai-namespace",
      "name": "pachdyderm-sample",
      "namespace": "testing",
      "storage_secret": "example-aws-secret"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		backupServiceFlags = flag.NewFlagSet("backup-service", flag.ContinueOnError)

		backupServiceCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		backupServiceCreateBodyFlag = backupServiceCreateFlags.String("body", "REQUIRED", "")

		backupServiceGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		backupServiceGetIDFlag = backupServiceGetFlags.String("id", "REQUIRED", "")

		backupServiceUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		backupServiceUpdateBodyFlag = backupServiceUpdateFlags.String("body", "REQUIRED", "")

		backupServiceDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		backupServiceDeleteIDFlag = backupServiceDeleteFlags.String("id", "REQUIRED", "")

		restoreServiceFlags = flag.NewFlagSet("restore-service", flag.ContinueOnError)

		restoreServiceCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		restoreServiceCreateBodyFlag = restoreServiceCreateFlags.String("body", "REQUIRED", "")

		restoreServiceGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		restoreServiceGetIDFlag = restoreServiceGetFlags.String("id", "REQUIRED", "")

		restoreServiceUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		restoreServiceUpdateBodyFlag = restoreServiceUpdateFlags.String("body", "REQUIRED", "")

		restoreServiceDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		restoreServiceDeleteIDFlag = restoreServiceDeleteFlags.String("id", "REQUIRED", "")
	)
	backupServiceFlags.Usage = backupServiceUsage
	backupServiceCreateFlags.Usage = backupServiceCreateUsage
	backupServiceGetFlags.Usage = backupServiceGetUsage
	backupServiceUpdateFlags.Usage = backupServiceUpdateUsage
	backupServiceDeleteFlags.Usage = backupServiceDeleteUsage

	restoreServiceFlags.Usage = restoreServiceUsage
	restoreServiceCreateFlags.Usage = restoreServiceCreateUsage
	restoreServiceGetFlags.Usage = restoreServiceGetUsage
	restoreServiceUpdateFlags.Usage = restoreServiceUpdateUsage
	restoreServiceDeleteFlags.Usage = restoreServiceDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "backup-service":
			svcf = backupServiceFlags
		case "restore-service":
			svcf = restoreServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "backup-service":
			switch epn {
			case "create":
				epf = backupServiceCreateFlags

			case "get":
				epf = backupServiceGetFlags

			case "update":
				epf = backupServiceUpdateFlags

			case "delete":
				epf = backupServiceDeleteFlags

			}

		case "restore-service":
			switch epn {
			case "create":
				epf = restoreServiceCreateFlags

			case "get":
				epf = restoreServiceGetFlags

			case "update":
				epf = restoreServiceUpdateFlags

			case "delete":
				epf = restoreServiceDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "backup-service":
			c := backupservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = backupservicec.BuildCreatePayload(*backupServiceCreateBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = backupservicec.BuildGetPayload(*backupServiceGetIDFlag)
			case "update":
				endpoint = c.Update()
				data, err = backupservicec.BuildUpdatePayload(*backupServiceUpdateBodyFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = backupservicec.BuildDeletePayload(*backupServiceDeleteIDFlag)
			}
		case "restore-service":
			c := restoreservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = restoreservicec.BuildCreatePayload(*restoreServiceCreateBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = restoreservicec.BuildGetPayload(*restoreServiceGetIDFlag)
			case "update":
				endpoint = c.Update()
				data, err = restoreservicec.BuildUpdatePayload(*restoreServiceUpdateBodyFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = restoreservicec.BuildDeletePayload(*restoreServiceDeleteIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// backup-serviceUsage displays the usage of the backup-service command and its
// subcommands.
func backupServiceUsage() {
	fmt.Fprintf(os.Stderr, `Service to handle backup requests
Usage:
    %[1]s [globalflags] backup-service COMMAND [flags]

COMMAND:
    create: New backup request
    get: Obtain backup request
    update: Update backup request
    delete: Mark complete backup request

Additional help:
    %[1]s backup-service COMMAND --help
`, os.Args[0])
}
func backupServiceCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] backup-service create -body JSON

New backup request
    -body JSON: 

Example:
    %[1]s backup-service create --body '{
      "command": "hostname -f",
      "container": "pachd",
      "kubernetes_resource": "{\"kind\":\"Pachyderm\",...}",
      "name": "pachdyderm-sample",
      "namespace": "testing",
      "pod": "pachd-65734594-sdg46",
      "storage_secret": "example-aws-secret"
   }'
`, os.Args[0])
}

func backupServiceGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] backup-service get -id STRING

Obtain backup request
    -id STRING: 

Example:
    %[1]s backup-service get --id "00000-090000-0000000-000000"
`, os.Args[0])
}

func backupServiceUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] backup-service update -body JSON

Update backup request
    -body JSON: 

Example:
    %[1]s backup-service update --body '{
      "command": "hostname -f",
      "container": "pachd",
      "created_at": "2019-10-12 07:20:50.52",
      "deleted_at": "2019-10-12 07:20:54.52",
      "id": "00000-090000-0000000-000000",
      "kubernetes_resource": "{\"kind\":\"Pachyderm\",...}",
      "location": "http://minio.local/backups/pachyderm-backup.tar.gz",
      "name": "pachdyderm-sample",
      "namespace": "testing",
      "pod": "pachd-65734594-sdg46",
      "state": "completed",
      "storage_secret": "example-aws-secret",
      "updated_at": "2019-10-12 07:20:52.52"
   }'
`, os.Args[0])
}

func backupServiceDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] backup-service delete -id STRING

Mark complete backup request
    -id STRING: 

Example:
    %[1]s backup-service delete --id "00000-090000-0000000-000000"
`, os.Args[0])
}

// restore-serviceUsage displays the usage of the restore-service command and
// its subcommands.
func restoreServiceUsage() {
	fmt.Fprintf(os.Stderr, `Service to handle restore requests
Usage:
    %[1]s [globalflags] restore-service COMMAND [flags]

COMMAND:
    create: New restore request
    get: Get restore request
    update: Update restore request
    delete: Mark complete restore request

Additional help:
    %[1]s restore-service COMMAND --help
`, os.Args[0])
}
func restoreServiceCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] restore-service create -body JSON

New restore request
    -body JSON: 

Example:
    %[1]s restore-service create --body '{
      "backup_location": "pachyderm-backup.tar.gz",
      "destination_name": "pachyderm-restore",
      "destination_namespace": "ai-namespace",
      "name": "pachdyderm-sample",
      "namespace": "testing",
      "storage_secret": "example-aws-secret"
   }'
`, os.Args[0])
}

func restoreServiceGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] restore-service get -id STRING

Get restore request
    -id STRING: 

Example:
    %[1]s restore-service get --id "00000-090000-0000000-000000"
`, os.Args[0])
}

func restoreServiceUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] restore-service update -body JSON

Update restore request
    -body JSON: 

Example:
    %[1]s restore-service update --body '{
      "backup_location": "pachyderm-backup.tar.gz",
      "created_at": "2019-10-12 07:20:50.52",
      "database": "database.sql",
      "deleted_at": "2019-10-12 07:20:54.52",
      "destination_name": "pachyderm-restore",
      "destination_namespace": "ai-namespace",
      "id": "00000-090000-0000000-000000",
      "kubernetes_resource": "pachyderm.yaml",
      "name": "pachdyderm-sample",
      "namespace": "testing",
      "storage_secret": "example-aws-secret",
      "updated_at": "2019-10-12 07:20:52.52"
   }'
`, os.Args[0])
}

func restoreServiceDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] restore-service delete -id STRING

Mark complete restore request
    -id STRING: 

Example:
    %[1]s restore-service delete --id "00000-090000-0000000-000000"
`, os.Args[0])
}
