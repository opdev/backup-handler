// Code generated by goa v3.7.2, DO NOT EDIT.
//
// Backup Service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/opdev/backup-handler/design

package client

import (
	"encoding/json"
	"fmt"

	backupservice "github.com/opdev/backup-handler/gen/backup_service"
)

// BuildCreatePayload builds the payload for the Backup Service create endpoint
// from CLI flags.
func BuildCreatePayload(backupServiceCreateBody string) (*backupservice.Backup, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(backupServiceCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"command\": \"hostname -f\",\n      \"container\": \"pachd\",\n      \"kubernetes_resource\": \"{\\\"kind\\\":\\\"Pachyderm\\\",...}\",\n      \"name\": \"pachdyderm-sample\",\n      \"namespace\": \"testing\",\n      \"pod\": \"pachd-65734594-sdg46\",\n      \"storage_secret\": \"example-aws-secret\"\n   }'")
		}
	}
	v := &backupservice.Backup{
		Name:               body.Name,
		Namespace:          body.Namespace,
		Pod:                body.Pod,
		Container:          body.Container,
		Command:            body.Command,
		StorageSecret:      body.StorageSecret,
		KubernetesResource: body.KubernetesResource,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the Backup Service get endpoint from
// CLI flags.
func BuildGetPayload(backupServiceGetID string) (*backupservice.GetPayload, error) {
	var id string
	{
		id = backupServiceGetID
	}
	v := &backupservice.GetPayload{}
	v.ID = &id

	return v, nil
}

// BuildUpdatePayload builds the payload for the Backup Service update endpoint
// from CLI flags.
func BuildUpdatePayload(backupServiceUpdateBody string) (*backupservice.Backupresult, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(backupServiceUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"backup_location\": \"http://minio.local/backups/pachyderm-backup.tar.gz\",\n      \"command\": \"hostname -f\",\n      \"container\": \"pachd\",\n      \"created_at\": \"2019-10-12 07:20:50.52\",\n      \"deleted_at\": \"2019-10-12 07:20:54.52\",\n      \"id\": \"00000-090000-0000000-000000\",\n      \"kubernetes_resource\": \"{\\\"kind\\\":\\\"Pachyderm\\\",...}\",\n      \"name\": \"pachdyderm-sample\",\n      \"namespace\": \"testing\",\n      \"pod\": \"pachd-65734594-sdg46\",\n      \"state\": \"completed\",\n      \"storage_secret\": \"example-aws-secret\",\n      \"updated_at\": \"2019-10-12 07:20:52.52\"\n   }'")
		}
	}
	v := &backupservice.Backupresult{
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
		DeletedAt:          body.DeletedAt,
		ID:                 body.ID,
		State:              body.State,
		Name:               body.Name,
		Namespace:          body.Namespace,
		Pod:                body.Pod,
		Container:          body.Container,
		Command:            body.Command,
		StorageSecret:      body.StorageSecret,
		KubernetesResource: body.KubernetesResource,
		BackupLocation:     body.BackupLocation,
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the Backup Service delete endpoint
// from CLI flags.
func BuildDeletePayload(backupServiceDeleteID string) (*backupservice.DeletePayload, error) {
	var id string
	{
		id = backupServiceDeleteID
	}
	v := &backupservice.DeletePayload{}
	v.ID = &id

	return v, nil
}
