// Code generated by goa v3.7.3, DO NOT EDIT.
//
// Backup Service HTTP server types
//
// Command:
// $ goa gen github.com/opdev/backup-handler/design

package server

import (
	backupservice "github.com/opdev/backup-handler/gen/backup_service"
	backupserviceviews "github.com/opdev/backup-handler/gen/backup_service/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "Backup Service" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Name of pachyderm instance backed up
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Namespace of resource backed up
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Name of target pod
	Pod *string `form:"pod,omitempty" json:"pod,omitempty" xml:"pod,omitempty"`
	// Name of container in pod
	Container *string `form:"container,omitempty" json:"container,omitempty" xml:"container,omitempty"`
	// base64 encoded command to run in pod
	Command *string `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// Kubernetes secret containing S3 storage credentials
	StorageSecret *string `form:"storage_secret,omitempty" json:"storage_secret,omitempty" xml:"storage_secret,omitempty"`
	// base64 encoded json representation of object
	KubernetesResource *string `form:"kubernetes_resource,omitempty" json:"kubernetes_resource,omitempty" xml:"kubernetes_resource,omitempty"`
}

// UpdateRequestBody is the type of the "Backup Service" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current state of the job
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Name of pachyderm instance backed up
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Namespace of resource backed up
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Name of target pod
	Pod *string `form:"pod,omitempty" json:"pod,omitempty" xml:"pod,omitempty"`
	// Name of container in pod
	Container *string `form:"container,omitempty" json:"container,omitempty" xml:"container,omitempty"`
	// base64 encoded command to run in pod
	Command *string `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// Kubernetes secret containing S3 storage credentials
	StorageSecret *string `form:"storage_secret,omitempty" json:"storage_secret,omitempty" xml:"storage_secret,omitempty"`
	// base64 encoded json representation of object
	KubernetesResource *string `form:"kubernetes_resource,omitempty" json:"kubernetes_resource,omitempty" xml:"kubernetes_resource,omitempty"`
	// URL of the uploaded backup tarball
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// CreateResponseBody is the type of the "Backup Service" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current state of the job
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Name of pachyderm instance backed up
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Namespace of resource backed up
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Name of target pod
	Pod *string `form:"pod,omitempty" json:"pod,omitempty" xml:"pod,omitempty"`
	// Name of container in pod
	Container *string `form:"container,omitempty" json:"container,omitempty" xml:"container,omitempty"`
	// base64 encoded command to run in pod
	Command *string `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// Kubernetes secret containing S3 storage credentials
	StorageSecret *string `form:"storage_secret,omitempty" json:"storage_secret,omitempty" xml:"storage_secret,omitempty"`
	// base64 encoded json representation of object
	KubernetesResource *string `form:"kubernetes_resource,omitempty" json:"kubernetes_resource,omitempty" xml:"kubernetes_resource,omitempty"`
	// URL of the uploaded backup tarball
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// GetResponseBody is the type of the "Backup Service" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current state of the job
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Name of pachyderm instance backed up
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Namespace of resource backed up
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Name of target pod
	Pod *string `form:"pod,omitempty" json:"pod,omitempty" xml:"pod,omitempty"`
	// Name of container in pod
	Container *string `form:"container,omitempty" json:"container,omitempty" xml:"container,omitempty"`
	// base64 encoded command to run in pod
	Command *string `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// Kubernetes secret containing S3 storage credentials
	StorageSecret *string `form:"storage_secret,omitempty" json:"storage_secret,omitempty" xml:"storage_secret,omitempty"`
	// base64 encoded json representation of object
	KubernetesResource *string `form:"kubernetes_resource,omitempty" json:"kubernetes_resource,omitempty" xml:"kubernetes_resource,omitempty"`
	// URL of the uploaded backup tarball
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// UpdateResponseBody is the type of the "Backup Service" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current state of the job
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Name of pachyderm instance backed up
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Namespace of resource backed up
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Name of target pod
	Pod *string `form:"pod,omitempty" json:"pod,omitempty" xml:"pod,omitempty"`
	// Name of container in pod
	Container *string `form:"container,omitempty" json:"container,omitempty" xml:"container,omitempty"`
	// base64 encoded command to run in pod
	Command *string `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// Kubernetes secret containing S3 storage credentials
	StorageSecret *string `form:"storage_secret,omitempty" json:"storage_secret,omitempty" xml:"storage_secret,omitempty"`
	// base64 encoded json representation of object
	KubernetesResource *string `form:"kubernetes_resource,omitempty" json:"kubernetes_resource,omitempty" xml:"kubernetes_resource,omitempty"`
	// URL of the uploaded backup tarball
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// DeleteResponseBody is the type of the "Backup Service" service "delete"
// endpoint HTTP response body.
type DeleteResponseBody struct {
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Current state of the job
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Name of pachyderm instance backed up
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Namespace of resource backed up
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Name of target pod
	Pod *string `form:"pod,omitempty" json:"pod,omitempty" xml:"pod,omitempty"`
	// Name of container in pod
	Container *string `form:"container,omitempty" json:"container,omitempty" xml:"container,omitempty"`
	// base64 encoded command to run in pod
	Command *string `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// Kubernetes secret containing S3 storage credentials
	StorageSecret *string `form:"storage_secret,omitempty" json:"storage_secret,omitempty" xml:"storage_secret,omitempty"`
	// base64 encoded json representation of object
	KubernetesResource *string `form:"kubernetes_resource,omitempty" json:"kubernetes_resource,omitempty" xml:"kubernetes_resource,omitempty"`
	// URL of the uploaded backup tarball
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
}

// GetBackupNotFoundResponseBody is the type of the "Backup Service" service
// "get" endpoint HTTP response body for the "backup_not_found" error.
type GetBackupNotFoundResponseBody struct {
	// backup resource not found
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateBackupNotFoundResponseBody is the type of the "Backup Service" service
// "update" endpoint HTTP response body for the "backup_not_found" error.
type UpdateBackupNotFoundResponseBody struct {
	// backup resource not found
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteBackupNotFoundResponseBody is the type of the "Backup Service" service
// "delete" endpoint HTTP response body for the "backup_not_found" error.
type DeleteBackupNotFoundResponseBody struct {
	// backup resource not found
	Message string `form:"message" json:"message" xml:"message"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "Backup Service" service.
func NewCreateResponseBody(res *backupserviceviews.BackupresultView) *CreateResponseBody {
	body := &CreateResponseBody{
		CreatedAt:          res.CreatedAt,
		UpdatedAt:          res.UpdatedAt,
		DeletedAt:          res.DeletedAt,
		ID:                 res.ID,
		State:              res.State,
		Name:               res.Name,
		Namespace:          res.Namespace,
		Pod:                res.Pod,
		Container:          res.Container,
		Command:            res.Command,
		StorageSecret:      res.StorageSecret,
		KubernetesResource: res.KubernetesResource,
		Location:           res.Location,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "Backup Service" service.
func NewGetResponseBody(res *backupserviceviews.BackupresultView) *GetResponseBody {
	body := &GetResponseBody{
		CreatedAt:          res.CreatedAt,
		UpdatedAt:          res.UpdatedAt,
		DeletedAt:          res.DeletedAt,
		ID:                 res.ID,
		State:              res.State,
		Name:               res.Name,
		Namespace:          res.Namespace,
		Pod:                res.Pod,
		Container:          res.Container,
		Command:            res.Command,
		StorageSecret:      res.StorageSecret,
		KubernetesResource: res.KubernetesResource,
		Location:           res.Location,
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "Backup Service" service.
func NewUpdateResponseBody(res *backupserviceviews.BackupresultView) *UpdateResponseBody {
	body := &UpdateResponseBody{
		CreatedAt:          res.CreatedAt,
		UpdatedAt:          res.UpdatedAt,
		DeletedAt:          res.DeletedAt,
		ID:                 res.ID,
		State:              res.State,
		Name:               res.Name,
		Namespace:          res.Namespace,
		Pod:                res.Pod,
		Container:          res.Container,
		Command:            res.Command,
		StorageSecret:      res.StorageSecret,
		KubernetesResource: res.KubernetesResource,
		Location:           res.Location,
	}
	return body
}

// NewDeleteResponseBody builds the HTTP response body from the result of the
// "delete" endpoint of the "Backup Service" service.
func NewDeleteResponseBody(res *backupserviceviews.BackupresultView) *DeleteResponseBody {
	body := &DeleteResponseBody{
		CreatedAt:          res.CreatedAt,
		UpdatedAt:          res.UpdatedAt,
		DeletedAt:          res.DeletedAt,
		ID:                 res.ID,
		State:              res.State,
		Name:               res.Name,
		Namespace:          res.Namespace,
		Pod:                res.Pod,
		Container:          res.Container,
		Command:            res.Command,
		StorageSecret:      res.StorageSecret,
		KubernetesResource: res.KubernetesResource,
		Location:           res.Location,
	}
	return body
}

// NewGetBackupNotFoundResponseBody builds the HTTP response body from the
// result of the "get" endpoint of the "Backup Service" service.
func NewGetBackupNotFoundResponseBody(res *backupservice.BackupNotFound) *GetBackupNotFoundResponseBody {
	body := &GetBackupNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateBackupNotFoundResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "Backup Service" service.
func NewUpdateBackupNotFoundResponseBody(res *backupservice.BackupNotFound) *UpdateBackupNotFoundResponseBody {
	body := &UpdateBackupNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteBackupNotFoundResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "Backup Service" service.
func NewDeleteBackupNotFoundResponseBody(res *backupservice.BackupNotFound) *DeleteBackupNotFoundResponseBody {
	body := &DeleteBackupNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateBackup builds a Backup Service service create endpoint payload.
func NewCreateBackup(body *CreateRequestBody) *backupservice.Backup {
	v := &backupservice.Backup{
		Name:               body.Name,
		Namespace:          body.Namespace,
		Pod:                body.Pod,
		Container:          body.Container,
		Command:            body.Command,
		StorageSecret:      body.StorageSecret,
		KubernetesResource: body.KubernetesResource,
	}

	return v
}

// NewGetPayload builds a Backup Service service get endpoint payload.
func NewGetPayload(id string) *backupservice.GetPayload {
	v := &backupservice.GetPayload{}
	v.ID = &id

	return v
}

// NewUpdateBackupresult builds a Backup Service service update endpoint
// payload.
func NewUpdateBackupresult(body *UpdateRequestBody) *backupservice.Backupresult {
	v := &backupservice.Backupresult{
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
		DeletedAt:          body.DeletedAt,
		ID:                 body.ID,
		State:              body.State,
		Name:               body.Name,
		Namespace:          body.Namespace,
		Pod:                body.Pod,
		Container:          body.Container,
		Command:            body.Command,
		StorageSecret:      body.StorageSecret,
		KubernetesResource: body.KubernetesResource,
		Location:           body.Location,
	}

	return v
}

// NewDeletePayload builds a Backup Service service delete endpoint payload.
func NewDeletePayload(id string) *backupservice.DeletePayload {
	v := &backupservice.DeletePayload{}
	v.ID = &id

	return v
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.State != nil {
		if !(*body.State == "queued" || *body.State == "running" || *body.State == "completed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.state", *body.State, []interface{}{"queued", "running", "completed"}))
		}
	}
	return
}
